[
    {
        "hunks": [
            {
                "content": "@@ -3,10 +3,10 @@",
                "oldStart": 3,
                "newStart": 3,
                "oldLines": 10,
                "newLines": 10,
                "changes": [
                    {
                        "content": "from copy import deepcopy",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 3,
                        "newLineNumber": 3
                    },
                    {
                        "content": "from enum import Enum",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 4,
                        "newLineNumber": 4
                    },
                    {
                        "content": "from logging import Logger, getLogger",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 5,
                        "newLineNumber": 5
                    },
                    {
                        "content": "from threading import RLock",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 6
                    },
                    {
                        "content": "from threading import Lock, RLock",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 6
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 7,
                        "newLineNumber": 7
                    },
                    {
                        "content": "from typing import Any, Callable, Dict, List, Optional, NamedTuple, Union, \\",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 8,
                        "newLineNumber": 8
                    },
                    {
                        "content": "    Sequence, Iterable, ContextManager, Set, Tuple, TYPE_CHECKING",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 9
                    },
                    {
                        "content": "    Sequence, Iterable, ContextManager, Set, Tuple, Type, TYPE_CHECKING",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 9
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 10,
                        "newLineNumber": 10
                    },
                    {
                        "content": "from dataclasses import dataclass, field",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 11,
                        "newLineNumber": 11
                    },
                    {
                        "content": "from twisted.internet.threads import deferToThread",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 12,
                        "newLineNumber": 12
                    }
                ]
            },
            {
                "content": "@@ -599,3 +599,50 @@ def listen(",
                "oldStart": 599,
                "newStart": 599,
                "oldLines": 3,
                "newLines": 50,
                "changes": [
                    {
                        "content": "            listener: EnvEventListener",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 599,
                        "newLineNumber": 599
                    },
                    {
                        "content": "    ) -> None:",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 600,
                        "newLineNumber": 600
                    },
                    {
                        "content": "        self._event_listeners.setdefault(event_type, set()).add(listener)",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 601,
                        "newLineNumber": 601
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 602
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 603
                    },
                    {
                        "content": "def delayed_config(cls: Type[Environment]) -> Type[Environment]:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 604
                    },
                    {
                        "content": "    \"\"\"",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 605
                    },
                    {
                        "content": "    This class decorator allows to save config update and apply it, when env is",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 606
                    },
                    {
                        "content": "    disabled.",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 607
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 608
                    },
                    {
                        "content": "    Mutex prevents the following scenario",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 609
                    },
                    {
                        "content": "    Thread 1                Thread 2",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 610
                    },
                    {
                        "content": "    call apply_next_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 611
                    },
                    {
                        "content": "                            call update_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 612
                    },
                    {
                        "content": "                            status is disabled, so calls",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 613
                    },
                    {
                        "content": "                                super().update_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 614
                    },
                    {
                        "content": "    cls.update_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 615
                    },
                    {
                        "content": "        with _next_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 616
                    },
                    {
                        "content": "    \"\"\"",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 617
                    },
                    {
                        "content": "    # FIXME workaround https://github.com/python/mypy/issues/5865",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 618
                    },
                    {
                        "content": "    cls2: Any = cls",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 619
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 620
                    },
                    {
                        "content": "    class DelayedConfigWrapper(cls2):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 621
                    },
                    {
                        "content": "        def __init__(self, *args, **kwargs) -> None:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 622
                    },
                    {
                        "content": "            super().__init__(*args, **kwargs)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 623
                    },
                    {
                        "content": "            self._next_config: Optional[EnvConfig] = None",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 624
                    },
                    {
                        "content": "            self._config_lock = Lock()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 625
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 626
                    },
                    {
                        "content": "            def apply_next_config(_):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 627
                    },
                    {
                        "content": "                with self._config_lock:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 628
                    },
                    {
                        "content": "                    if self._next_config is None:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 629
                    },
                    {
                        "content": "                        return",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 630
                    },
                    {
                        "content": "                    self._logger.debug(\"Applying saved config\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 631
                    },
                    {
                        "content": "                    config = self._next_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 632
                    },
                    {
                        "content": "                    self._next_config = None",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 633
                    },
                    {
                        "content": "                    cls.update_config(self, config)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 634
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 635
                    },
                    {
                        "content": "            self.listen(EnvEventType.DISABLED, apply_next_config)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 636
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 637
                    },
                    {
                        "content": "        def update_config(self, new_config: EnvConfig) -> None:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 638
                    },
                    {
                        "content": "            with self._config_lock:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 639
                    },
                    {
                        "content": "                if self._status == EnvStatus.DISABLED:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 640
                    },
                    {
                        "content": "                    self._logger.debug(\"Config applied immediately\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 641
                    },
                    {
                        "content": "                    super().update_config(new_config)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 642
                    },
                    {
                        "content": "                    return",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 643
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 644
                    },
                    {
                        "content": "                self._logger.debug(\"Config saved for later\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 645
                    },
                    {
                        "content": "                self._next_config = new_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 646
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 647
                    },
                    {
                        "content": "    return DelayedConfigWrapper",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 648
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "golem/envs/__init__.py",
        "newPath": "golem/envs/__init__.py",
        "oldRevision": "03a0d5ca3f",
        "newRevision": "2e6691b29b",
        "newMode": "100644",
        "oldMode": "100644",
        "type": "modify"
    },
    {
        "hunks": [
            {
                "content": "@@ -41,7 +41,8 @@",
                "oldStart": 41,
                "newStart": 41,
                "oldLines": 7,
                "newLines": 8,
                "changes": [
                    {
                        "content": "    RuntimePayload,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 41,
                        "newLineNumber": 41
                    },
                    {
                        "content": "    RuntimeStatus,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 42,
                        "newLineNumber": 42
                    },
                    {
                        "content": "    UsageCounter,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 43,
                        "newLineNumber": 43
                    },
                    {
                        "content": "    UsageCounterValues",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 44
                    },
                    {
                        "content": "    UsageCounterValues,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 44
                    },
                    {
                        "content": "    delayed_config,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 45
                    },
                    {
                        "content": ")",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 45,
                        "newLineNumber": 46
                    },
                    {
                        "content": "from golem.envs.docker import DockerRuntimePayload, DockerPrerequisites",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 46,
                        "newLineNumber": 47
                    },
                    {
                        "content": "from golem.envs.docker.whitelist import Whitelist",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 47,
                        "newLineNumber": 48
                    }
                ]
            },
            {
                "content": "@@ -496,6 +497,7 @@ def usage_counter_values(self) -> UsageCounterValues:",
                "oldStart": 496,
                "newStart": 497,
                "oldLines": 6,
                "newLines": 7,
                "changes": [
                    {
                        "content": "        return deepcopy(self._counters)",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 496,
                        "newLineNumber": 497
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 497,
                        "newLineNumber": 498
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 498,
                        "newLineNumber": 499
                    },
                    {
                        "content": "@delayed_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 500
                    },
                    {
                        "content": "class DockerCPUEnvironment(EnvironmentBase):",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 499,
                        "newLineNumber": 501
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 500,
                        "newLineNumber": 502
                    },
                    {
                        "content": "    MIN_MEMORY_MB: ClassVar[int] = 1024",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 501,
                        "newLineNumber": 503
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "golem/envs/docker/cpu.py",
        "newPath": "golem/envs/docker/cpu.py",
        "oldRevision": "f9b0c48dc5",
        "newRevision": "0a9ade1ce8",
        "newMode": "100644",
        "oldMode": "100644",
        "type": "modify"
    },
    {
        "hunks": [
            {
                "content": "@@ -77,7 +77,7 @@ def __init__(",
                "oldStart": 77,
                "newStart": 77,
                "oldLines": 7,
                "newLines": 7,
                "changes": [
                    {
                        "content": "        )\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 77,
                        "newLineNumber": 77
                    },
                    {
                        "content": "        self._new_computer = NewTaskComputer(\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 78,
                        "newLineNumber": 78
                    },
                    {
                        "content": "            env_manager=env_manager,\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 79,
                        "newLineNumber": 79
                    },
                    {
                        "content": "            work_dir=task_server.get_task_computer_root(),\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 80
                    },
                    {
                        "content": "            work_dir=Path(task_server.get_task_computer_root()),\r",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 80
                    },
                    {
                        "content": "            stats_keeper=self.stats\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 81,
                        "newLineNumber": 81
                    },
                    {
                        "content": "        )\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 82,
                        "newLineNumber": 82
                    },
                    {
                        "content": "\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 83,
                        "newLineNumber": 83
                    }
                ]
            },
            {
                "content": "@@ -263,10 +263,8 @@ def change_config(",
                "oldStart": 263,
                "newStart": 263,
                "oldLines": 10,
                "newLines": 8,
                "changes": [
                    {
                        "content": "            config_desc: 'ClientConfigDescriptor',\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 263,
                        "newLineNumber": 263
                    },
                    {
                        "content": "            in_background: bool = True\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 264,
                        "newLineNumber": 264
                    },
                    {
                        "content": "    ) -> defer.Deferred:\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 265,
                        "newLineNumber": 265
                    },
                    {
                        "content": "        work_dir = Path(self._task_server.get_task_computer_root())\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 266
                    },
                    {
                        "content": "        yield self._new_computer.change_config(\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 267
                    },
                    {
                        "content": "            config_desc=config_desc,\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 268
                    },
                    {
                        "content": "            work_dir=work_dir)\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 269
                    },
                    {
                        "content": "        self._new_computer.change_config(\r",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 266
                    },
                    {
                        "content": "            config_desc=config_desc)\r",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 267
                    },
                    {
                        "content": "        return (yield self._old_computer.change_config(\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 270,
                        "newLineNumber": 268
                    },
                    {
                        "content": "            config_desc=config_desc,\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 271,
                        "newLineNumber": 269
                    },
                    {
                        "content": "            in_background=in_background))\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 272,
                        "newLineNumber": 270
                    }
                ]
            },
            {
                "content": "@@ -480,13 +478,9 @@ def get_current_computing_env(self) -> 'Optional[EnvId]':",
                "oldStart": 480,
                "newStart": 478,
                "oldLines": 13,
                "newLines": 9,
                "changes": [
                    {
                        "content": "    def change_config(\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 480,
                        "newLineNumber": 478
                    },
                    {
                        "content": "            self,\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 481,
                        "newLineNumber": 479
                    },
                    {
                        "content": "            config_desc: 'ClientConfigDescriptor',\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 482,
                        "newLineNumber": 480
                    },
                    {
                        "content": "            work_dir: Path\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 483
                    },
                    {
                        "content": "    ) -> defer.Deferred:\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 484
                    },
                    {
                        "content": "        assert not self._is_computing()\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 485
                    },
                    {
                        "content": "        self._work_dir = work_dir\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 486
                    },
                    {
                        "content": "\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 487
                    },
                    {
                        "content": "    ) -> None:\r",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 481
                    },
                    {
                        "content": "        config_dict = dict(\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 488,
                        "newLineNumber": 482
                    },
                    {
                        "content": "            work_dirs=[work_dir],\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 489
                    },
                    {
                        "content": "            work_dirs=[self._work_dir],\r",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 483
                    },
                    {
                        "content": "            cpu_count=config_desc.num_cores,\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 490,
                        "newLineNumber": 484
                    },
                    {
                        "content": "            memory_mb=scale_memory(\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 491,
                        "newLineNumber": 485
                    },
                    {
                        "content": "                config_desc.max_memory_size,\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 492,
                        "newLineNumber": 486
                    }
                ]
            },
            {
                "content": "@@ -505,8 +499,6 @@ def change_config(",
                "oldStart": 505,
                "newStart": 499,
                "oldLines": 8,
                "newLines": 6,
                "changes": [
                    {
                        "content": "            # TODO: GPU options in config_dict\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 505,
                        "newLineNumber": 499
                    },
                    {
                        "content": "            docker_gpu.update_config(DockerGPUConfig(**config_dict))\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 506,
                        "newLineNumber": 500
                    },
                    {
                        "content": "\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 507,
                        "newLineNumber": 501
                    },
                    {
                        "content": "        return defer.succeed(None)\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 508
                    },
                    {
                        "content": "\r",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 509
                    },
                    {
                        "content": "    def quit(self):\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 510,
                        "newLineNumber": 502
                    },
                    {
                        "content": "        if self.has_assigned_task():\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 511,
                        "newLineNumber": 503
                    },
                    {
                        "content": "            self.task_interrupted()\r",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 512,
                        "newLineNumber": 504
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "golem/task/taskcomputer.py",
        "newPath": "golem/task/taskcomputer.py",
        "oldRevision": "cf4d60e9ca",
        "newRevision": "4fb41b7c84",
        "newMode": "100644",
        "oldMode": "100644",
        "type": "modify"
    },
    {
        "hunks": [
            {
                "content": "@@ -0,0 +1,43 @@",
                "oldStart": 0,
                "newStart": 1,
                "oldLines": 1,
                "newLines": 43,
                "changes": [
                    {
                        "content": "#!/usr/bin/env python",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 1
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 2
                    },
                    {
                        "content": "import logging",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 3
                    },
                    {
                        "content": "from unittest.mock import patch",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 4
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 5
                    },
                    {
                        "content": "from twisted.internet.defer import inlineCallbacks",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 6
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 7
                    },
                    {
                        "content": "from golemapp import main",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 8
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 9
                    },
                    {
                        "content": "from golem.client import Client",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 10
                    },
                    {
                        "content": "from golem.task.taskserver import TaskServer",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 11
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 12
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 13
                    },
                    {
                        "content": "def on_exception():",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 14
                    },
                    {
                        "content": "    logging.critical(\"#### Integration test failed ####\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 15
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 16
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 17
                    },
                    {
                        "content": "client_change_config_orig = Client.change_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 18
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 19
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 20
                    },
                    {
                        "content": "def client_change_config(self: Client, *args, **kwargs):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 21
                    },
                    {
                        "content": "    try:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 22
                    },
                    {
                        "content": "        client_change_config_orig(self, *args, **kwargs)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 23
                    },
                    {
                        "content": "    except:  # noqa pylint: disable=broad-except",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 24
                    },
                    {
                        "content": "        on_exception()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 25
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 26
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 27
                    },
                    {
                        "content": "task_server_change_config_orig = TaskServer.change_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 28
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 29
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 30
                    },
                    {
                        "content": "@inlineCallbacks",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 31
                    },
                    {
                        "content": "def task_server_change_config(self: TaskServer, *args, **kwargs):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 32
                    },
                    {
                        "content": "    try:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 33
                    },
                    {
                        "content": "        yield task_server_change_config_orig(self, *args, **kwargs)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 34
                    },
                    {
                        "content": "    except:  # noqa pylint: disable=broad-except",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 35
                    },
                    {
                        "content": "        on_exception()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 36
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 37
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 38
                    },
                    {
                        "content": "with patch(\"golem.client.Client.change_config\",",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 39
                    },
                    {
                        "content": "           client_change_config), \\",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 40
                    },
                    {
                        "content": "     patch(\"golem.task.taskserver.TaskServer.change_config\",",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 41
                    },
                    {
                        "content": "           task_server_change_config):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 42
                    },
                    {
                        "content": "    main()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 43
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "/dev/null",
        "newPath": "scripts/node_integration_tests/nodes/provider/configure_or_die.py",
        "newMode": "100644",
        "oldRevision": "0000000000",
        "newRevision": "468db0a3d1",
        "type": "add"
    },
    {
        "hunks": [],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "scripts/node_integration_tests/playbooks/golem/reconfigure_provider_while_working/__init__.py",
        "newPath": "scripts/node_integration_tests/playbooks/golem/reconfigure_provider_while_working/__init__.py",
        "newMode": "100644",
        "oldRevision": "0000000000",
        "newRevision": "e69de29bb2",
        "type": "modify"
    },
    {
        "hunks": [
            {
                "content": "@@ -0,0 +1,73 @@",
                "oldStart": 0,
                "newStart": 1,
                "oldLines": 1,
                "newLines": 73,
                "changes": [
                    {
                        "content": "import time",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 1
                    },
                    {
                        "content": "from functools import partial",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 2
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 3
                    },
                    {
                        "content": "from scripts.node_integration_tests import helpers",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 4
                    },
                    {
                        "content": "from ...test_config_base import NodeId",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 5
                    },
                    {
                        "content": "from ..task_api.playbook import Playbook as BasePlaybook",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 6
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 7
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 8
                    },
                    {
                        "content": "class Playbook(BasePlaybook):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 9
                    },
                    {
                        "content": "    def wait_for_computing_task(self):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 10
                    },
                    {
                        "content": "        def on_success(result):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 11
                    },
                    {
                        "content": "            state = result['provider_state']",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 12
                    },
                    {
                        "content": "            print(f\"provider state: {state}\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 13
                    },
                    {
                        "content": "            if state['status'] == 'Computing':",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 14
                    },
                    {
                        "content": "                self.next()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 15
                    },
                    {
                        "content": "            else:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 16
                    },
                    {
                        "content": "                time.sleep(10)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 17
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 18
                    },
                    {
                        "content": "        def on_error(_):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 19
                    },
                    {
                        "content": "            print(f\"failed getting provider stats\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 20
                    },
                    {
                        "content": "            self.fail()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 21
                    },
                    {
                        "content": "        return self.call(NodeId.provider, 'comp.tasks.stats',",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 22
                    },
                    {
                        "content": "                         on_success=on_success, on_error=on_error)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 23
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 24
                    },
                    {
                        "content": "    def ui_stop(self, node_id: NodeId):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 25
                    },
                    {
                        "content": "        def on_success(_):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 26
                    },
                    {
                        "content": "            print(f\"stopped {node_id.value}\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 27
                    },
                    {
                        "content": "            self.next()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 28
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 29
                    },
                    {
                        "content": "        def on_error(_):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 30
                    },
                    {
                        "content": "            print(f\"stopping {node_id.value} failed\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 31
                    },
                    {
                        "content": "            self.fail()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 32
                    },
                    {
                        "content": "        return self.call(node_id, 'ui.stop', on_success=on_success,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 33
                    },
                    {
                        "content": "                         on_error=on_error)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 34
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 35
                    },
                    {
                        "content": "    def change_config(self, node_id: NodeId):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 36
                    },
                    {
                        "content": "        opts = {",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 37
                    },
                    {
                        "content": "            \"node_name\": \"a new name\",",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 38
                    },
                    {
                        "content": "        }",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 39
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 40
                    },
                    {
                        "content": "        def on_success(_):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 41
                    },
                    {
                        "content": "            print(f\"reconfigured {node_id.value}\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 42
                    },
                    {
                        "content": "            time.sleep(10)  # give time for async operations to process",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 43
                    },
                    {
                        "content": "            self.next()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 44
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 45
                    },
                    {
                        "content": "        def on_error(_):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 46
                    },
                    {
                        "content": "            print(f\"reconfiguring {node_id.value} failed\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 47
                    },
                    {
                        "content": "            self.fail()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 48
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 49
                    },
                    {
                        "content": "        return self.call(node_id, 'env.opts.update', opts,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 50
                    },
                    {
                        "content": "                         on_success=on_success, on_error=on_error)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 51
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 52
                    },
                    {
                        "content": "    def check_if_test_failed(self, node_id: NodeId):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 53
                    },
                    {
                        "content": "        test_failed = bool(helpers.search_output(",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 54
                    },
                    {
                        "content": "            self.output_queues[node_id],",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 55
                    },
                    {
                        "content": "            \".*#### Integration test failed ####.*\"))",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 56
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 57
                    },
                    {
                        "content": "        if test_failed:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 58
                    },
                    {
                        "content": "            self.fail(\"found failure marker in log\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 59
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 60
                    },
                    {
                        "content": "        print(\"no failure marker found in log\")",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 61
                    },
                    {
                        "content": "        self.next()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 62
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 63
                    },
                    {
                        "content": "    steps = BasePlaybook.initial_steps + (",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 64
                    },
                    {
                        "content": "        BasePlaybook.step_enable_app,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 65
                    },
                    {
                        "content": "        BasePlaybook.step_create_task,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 66
                    },
                    {
                        "content": "        BasePlaybook.step_get_task_id,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 67
                    },
                    {
                        "content": "        BasePlaybook.step_get_task_status,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 68
                    },
                    {
                        "content": "        wait_for_computing_task,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 69
                    },
                    {
                        "content": "        partial(ui_stop, node_id=NodeId.provider),",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 70
                    },
                    {
                        "content": "        partial(change_config, node_id=NodeId.provider),",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 71
                    },
                    {
                        "content": "        partial(check_if_test_failed, node_id=NodeId.provider),",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 72
                    },
                    {
                        "content": "    )",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 73
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "/dev/null",
        "newPath": "scripts/node_integration_tests/playbooks/golem/reconfigure_provider_while_working/playbook.py",
        "newMode": "100644",
        "oldRevision": "0000000000",
        "newRevision": "d37df4e43f",
        "type": "add"
    },
    {
        "hunks": [
            {
                "content": "@@ -0,0 +1,9 @@",
                "oldStart": 0,
                "newStart": 1,
                "oldLines": 1,
                "newLines": 9,
                "changes": [
                    {
                        "content": "from ...test_config_base import NodeId",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 1
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 2
                    },
                    {
                        "content": "from ..task_api.test_config import TestConfig as TestConfigBase",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 3
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 4
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 5
                    },
                    {
                        "content": "class TestConfig(TestConfigBase):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 6
                    },
                    {
                        "content": "    def __init__(self):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 7
                    },
                    {
                        "content": "        super().__init__()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 8
                    },
                    {
                        "content": "        self.nodes[NodeId.provider].script = 'provider/configure_or_die'",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 9
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "/dev/null",
        "newPath": "scripts/node_integration_tests/playbooks/golem/reconfigure_provider_while_working/test_config.py",
        "newMode": "100644",
        "oldRevision": "0000000000",
        "newRevision": "ff69680000",
        "type": "add"
    },
    {
        "hunks": [
            {
                "content": "@@ -329,11 +329,6 @@ def test_wrong_type(self):",
                "oldStart": 329,
                "newStart": 329,
                "oldLines": 11,
                "newLines": 6,
                "changes": [
                    {
                        "content": "        with self.assertRaises(AssertionError):",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 329,
                        "newLineNumber": 329
                    },
                    {
                        "content": "            self.env.update_config(object())",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 330,
                        "newLineNumber": 330
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 331,
                        "newLineNumber": 331
                    },
                    {
                        "content": "    def test_enabled_status(self):",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 332
                    },
                    {
                        "content": "        self.env._status = EnvStatus.ENABLED",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 333
                    },
                    {
                        "content": "        with self.assertRaises(ValueError):",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 334
                    },
                    {
                        "content": "            self.env.update_config(Mock(spec=DockerCPUConfig))",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 335
                    },
                    {
                        "content": "",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 336
                    },
                    {
                        "content": "    @patch_env('_validate_config', side_effect=ValueError)",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 337,
                        "newLineNumber": 332
                    },
                    {
                        "content": "    def test_invalid_config(self, validate):",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 338,
                        "newLineNumber": 333
                    },
                    {
                        "content": "        config = Mock(spec=DockerCPUConfig)",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 339,
                        "newLineNumber": 334
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "tests/golem/envs/docker/cpu/test_env.py",
        "newPath": "tests/golem/envs/docker/cpu/test_env.py",
        "oldRevision": "167babe68e",
        "newRevision": "b5c049d683",
        "newMode": "100644",
        "oldMode": "100644",
        "type": "modify"
    },
    {
        "hunks": [
            {
                "content": "@@ -2,13 +2,18 @@",
                "oldStart": 2,
                "newStart": 2,
                "oldLines": 13,
                "newLines": 18,
                "changes": [
                    {
                        "content": "from unittest import TestCase",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 2,
                        "newLineNumber": 2
                    },
                    {
                        "content": "from unittest.mock import Mock, patch",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 3,
                        "newLineNumber": 3
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 4,
                        "newLineNumber": 4
                    },
                    {
                        "content": "from dataclasses import dataclass",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 5
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 6
                    },
                    {
                        "content": "from twisted.internet import defer",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 7
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 8
                    },
                    {
                        "content": "from golem.envs import (",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 5,
                        "newLineNumber": 9
                    },
                    {
                        "content": "    EnvConfig,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 6,
                        "newLineNumber": 10
                    },
                    {
                        "content": "    EnvEvent,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 7,
                        "newLineNumber": 11
                    },
                    {
                        "content": "    EnvEventType,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 8,
                        "newLineNumber": 12
                    },
                    {
                        "content": "    EnvironmentBase,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 9,
                        "newLineNumber": 13
                    },
                    {
                        "content": "    EnvStatus,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 10,
                        "newLineNumber": 14
                    },
                    {
                        "content": "    Prerequisites",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 11
                    },
                    {
                        "content": "    Prerequisites,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 15
                    },
                    {
                        "content": "    delayed_config,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 16
                    },
                    {
                        "content": ")",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 12,
                        "newLineNumber": 17
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 13,
                        "newLineNumber": 18
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 14,
                        "newLineNumber": 19
                    }
                ]
            },
            {
                "content": "@@ -121,3 +126,87 @@ def test_re_register(self):",
                "oldStart": 121,
                "newStart": 126,
                "oldLines": 3,
                "newLines": 87,
                "changes": [
                    {
                        "content": "        self.assertEqual(self.env._event_listeners, {",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 121,
                        "newLineNumber": 126
                    },
                    {
                        "content": "            EnvEventType.ERROR_OCCURRED: {listener}",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 122,
                        "newLineNumber": 127
                    },
                    {
                        "content": "        })",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 123,
                        "newLineNumber": 128
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 129
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 130
                    },
                    {
                        "content": "@dataclass",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 131
                    },
                    {
                        "content": "class MyConfig(EnvConfig):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 132
                    },
                    {
                        "content": "    i: int",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 133
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 134
                    },
                    {
                        "content": "    def to_dict(self) -> dict:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 135
                    },
                    {
                        "content": "        pass",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 136
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 137
                    },
                    {
                        "content": "    @staticmethod",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 138
                    },
                    {
                        "content": "    def from_dict(data):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 139
                    },
                    {
                        "content": "        pass",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 140
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 141
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 142
                    },
                    {
                        "content": "@delayed_config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 143
                    },
                    {
                        "content": "class MyEnv(EnvironmentBase):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 144
                    },
                    {
                        "content": "    def __init__(self, config: MyConfig) -> None:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 145
                    },
                    {
                        "content": "        super().__init__()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 146
                    },
                    {
                        "content": "        self._config = config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 147
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 148
                    },
                    {
                        "content": "    def update_config(self, config: EnvConfig) -> None:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 149
                    },
                    {
                        "content": "        assert isinstance(config, MyConfig)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 150
                    },
                    {
                        "content": "        self._logger.debug(\"dupa %r\", self._event_listeners)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 151
                    },
                    {
                        "content": "        if self._status != EnvStatus.DISABLED:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 152
                    },
                    {
                        "content": "            raise ValueError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 153
                    },
                    {
                        "content": "        self._config = config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 154
                    },
                    {
                        "content": "        self._config_updated(config)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 155
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 156
                    },
                    {
                        "content": "    def config(self) -> MyConfig:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 157
                    },
                    {
                        "content": "        return self._config",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 158
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 159
                    },
                    {
                        "content": "    @classmethod",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 160
                    },
                    {
                        "content": "    def supported(cls):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 161
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 162
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 163
                    },
                    {
                        "content": "    def prepare(self):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 164
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 165
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 166
                    },
                    {
                        "content": "    def clean_up(self):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 167
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 168
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 169
                    },
                    {
                        "content": "    def run_benchmark(self):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 170
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 171
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 172
                    },
                    {
                        "content": "    def parse_prerequisites(self, prerequisites_dict):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 173
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 174
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 175
                    },
                    {
                        "content": "    def install_prerequisites(self, prerequisites):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 176
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 177
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 178
                    },
                    {
                        "content": "    def parse_config(self, config_dict):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 179
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 180
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 181
                    },
                    {
                        "content": "    def supported_usage_counters(self):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 182
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 183
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 184
                    },
                    {
                        "content": "    def runtime(self, payload, config=None):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 185
                    },
                    {
                        "content": "        raise NotImplementedError",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 186
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 187
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 188
                    },
                    {
                        "content": "def execute(f, *args, **kwargs):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 189
                    },
                    {
                        "content": "    try:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 190
                    },
                    {
                        "content": "        return defer.succeed(f(*args, **kwargs))",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 191
                    },
                    {
                        "content": "    except Exception as exc:  # pylint: disable=broad-except",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 192
                    },
                    {
                        "content": "        return defer.fail(exc)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 193
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 194
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 195
                    },
                    {
                        "content": "@patch('golem.envs.deferToThread', execute)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 196
                    },
                    {
                        "content": "class TestDelayedConfig(TestCase):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 197
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 198
                    },
                    {
                        "content": "    def setUp(self) -> None:",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 199
                    },
                    {
                        "content": "        config = MyConfig(i=1)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 200
                    },
                    {
                        "content": "        self.env = MyEnv(config)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 201
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 202
                    },
                    {
                        "content": "    def test_update_config_when_disabled(self):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 203
                    },
                    {
                        "content": "        self.env.update_config(MyConfig(i=2))",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 204
                    },
                    {
                        "content": "        self.assertEqual(self.env.config().i, 2)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 205
                    },
                    {
                        "content": "",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 206
                    },
                    {
                        "content": "    def test_update_config_when_enabled(self):",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 207
                    },
                    {
                        "content": "        self.env._env_enabled()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 208
                    },
                    {
                        "content": "        self.env.update_config(MyConfig(i=2))",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 209
                    },
                    {
                        "content": "        self.assertEqual(self.env.config().i, 1)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 210
                    },
                    {
                        "content": "        self.env._env_disabled()",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 211
                    },
                    {
                        "content": "        self.assertEqual(self.env.config().i, 2)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 212
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "tests/golem/envs/test_env.py",
        "newPath": "tests/golem/envs/test_env.py",
        "oldRevision": "e7fb5e8401",
        "newRevision": "dbda654891",
        "newMode": "100644",
        "oldMode": "100644",
        "type": "modify"
    },
    {
        "hunks": [
            {
                "content": "@@ -320,28 +320,17 @@ def test_client_client_and_compute(self):",
                "oldStart": 320,
                "newStart": 320,
                "oldLines": 28,
                "newLines": 17,
                "changes": [
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 320,
                        "newLineNumber": 320
                    },
                    {
                        "content": "class TestChangeConfig(NewTaskComputerTestBase):",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 321,
                        "newLineNumber": 321
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 322,
                        "newLineNumber": 322
                    },
                    {
                        "content": "    @defer.inlineCallbacks",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 323
                    },
                    {
                        "content": "    def test_computation_running(self):",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 324
                    },
                    {
                        "content": "        self.task_computer._computation = mock.Mock()",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 325
                    },
                    {
                        "content": "        work_dir = Path('test_dir')",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 326
                    },
                    {
                        "content": "        config_desc = ClientConfigDescriptor()",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 327
                    },
                    {
                        "content": "        with self.assertRaises(AssertionError):",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 328
                    },
                    {
                        "content": "            yield self.task_computer.change_config(config_desc, work_dir)",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 329
                    },
                    {
                        "content": "",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 330
                    },
                    {
                        "content": "    @defer.inlineCallbacks",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 331
                    },
                    {
                        "content": "    def test_ok(self):",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 332,
                        "newLineNumber": 323
                    },
                    {
                        "content": "        work_dir = Path('test_dir')",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 333
                    },
                    {
                        "content": "        config_desc = ClientConfigDescriptor()",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 334,
                        "newLineNumber": 324
                    },
                    {
                        "content": "        config_desc.num_cores = 13",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 335,
                        "newLineNumber": 325
                    },
                    {
                        "content": "        config_desc.max_memory_size = 1024 * 1024",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 336,
                        "newLineNumber": 326
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 337,
                        "newLineNumber": 327
                    },
                    {
                        "content": "        yield self.task_computer.change_config(config_desc, work_dir)",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 338
                    },
                    {
                        "content": "        self.task_computer.change_config(config_desc)",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 328
                    },
                    {
                        "content": "",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 339,
                        "newLineNumber": 329
                    },
                    {
                        "content": "        self.assertEqual(self.task_computer._work_dir, work_dir)",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 340
                    },
                    {
                        "content": "        self.env_manager.environment.assert_called_once_with(DOCKER_CPU_ENV_ID)",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 341,
                        "newLineNumber": 330
                    },
                    {
                        "content": "        self.env_manager.environment().update_config.assert_called_once_with(",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 342,
                        "newLineNumber": 331
                    },
                    {
                        "content": "            DockerCPUConfig(",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 343,
                        "newLineNumber": 332
                    },
                    {
                        "content": "                work_dirs=[Path('test_dir')],",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 344
                    },
                    {
                        "content": "                work_dirs=[self.work_dir],",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 333
                    },
                    {
                        "content": "                cpu_count=13,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 345,
                        "newLineNumber": 334
                    },
                    {
                        "content": "                memory_mb=1024,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 346,
                        "newLineNumber": 335
                    },
                    {
                        "content": "            )",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 347,
                        "newLineNumber": 336
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "tests/golem/task/test_newtaskcomputer.py",
        "newPath": "tests/golem/task/test_newtaskcomputer.py",
        "oldRevision": "1b3f7b7b4c",
        "newRevision": "991420fdb0",
        "newMode": "100644",
        "oldMode": "100644",
        "type": "modify"
    },
    {
        "hunks": [
            {
                "content": "@@ -34,7 +34,8 @@ def setUp(self, new_task_computer, old_task_computer, int_stats_keeper):  # noqa",
                "oldStart": 34,
                "newStart": 34,
                "oldLines": 7,
                "newLines": 8,
                "changes": [
                    {
                        "content": "        self.task_server = mock.Mock(",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 34,
                        "newLineNumber": 34
                    },
                    {
                        "content": "            spec=TaskServer,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 35,
                        "newLineNumber": 35
                    },
                    {
                        "content": "            config_desc=config_desc,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 36,
                        "newLineNumber": 36
                    },
                    {
                        "content": "            task_keeper=self.task_keeper",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 37
                    },
                    {
                        "content": "            task_keeper=self.task_keeper,",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 37
                    },
                    {
                        "content": "            get_task_computer_root=mock.Mock(return_value=Path(\"/tmp\")),",
                        "type": "insert",
                        "isInsert": true,
                        "lineNumber": 38
                    },
                    {
                        "content": "        )",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 38,
                        "newLineNumber": 39
                    },
                    {
                        "content": "        self.env_manager = mock.Mock(spec_set=EnvironmentManager)",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 39,
                        "newLineNumber": 40
                    },
                    {
                        "content": "        self.finished_callback = mock.Mock()",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 40,
                        "newLineNumber": 41
                    }
                ]
            },
            {
                "content": "@@ -336,11 +337,9 @@ def test_compute_tasks_setting(self):",
                "oldStart": 336,
                "newStart": 337,
                "oldLines": 11,
                "newLines": 9,
                "changes": [
                    {
                        "content": "    @defer.inlineCallbacks",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 336,
                        "newLineNumber": 337
                    },
                    {
                        "content": "    def test_both_computers_reconfigured(self):",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 337,
                        "newLineNumber": 338
                    },
                    {
                        "content": "        config_desc = ClientConfigDescriptor()",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 338,
                        "newLineNumber": 339
                    },
                    {
                        "content": "        self.task_server.get_task_computer_root.return_value = '/test'",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 339
                    },
                    {
                        "content": "        yield self.adapter.change_config(config_desc)",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 340,
                        "newLineNumber": 340
                    },
                    {
                        "content": "        self.new_computer.change_config.assert_called_once_with(",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 341,
                        "newLineNumber": 341
                    },
                    {
                        "content": "            config_desc=config_desc,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 342,
                        "newLineNumber": 342
                    },
                    {
                        "content": "            work_dir=Path('/test')",
                        "type": "delete",
                        "isDelete": true,
                        "lineNumber": 343
                    },
                    {
                        "content": "        )",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 344,
                        "newLineNumber": 343
                    },
                    {
                        "content": "        self.old_computer.change_config.assert_called_once_with(",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 345,
                        "newLineNumber": 344
                    },
                    {
                        "content": "            config_desc=config_desc,",
                        "type": "normal",
                        "isNormal": true,
                        "oldLineNumber": 346,
                        "newLineNumber": 345
                    }
                ]
            }
        ],
        "oldEndingNewLine": true,
        "newEndingNewLine": true,
        "oldPath": "tests/golem/task/test_taskcomputeradapter.py",
        "newPath": "tests/golem/task/test_taskcomputeradapter.py",
        "oldRevision": "cbc4d64b0a",
        "newRevision": "c735de6028",
        "newMode": "100644",
        "oldMode": "100644",
        "type": "modify"
    }
]
